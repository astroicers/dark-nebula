apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: ping-check-template
spec:
  volumes:
    - name: shared-output
      persistentVolumeClaim:
        claimName: shared-pvc
  templates:
    - name: ping-check
      inputs:
        parameters:
          - name: base-subdomain
      steps:
        - - name: run-ping-check-self
            template: ping-check-self
            arguments:
              parameters:
                - name: base-subdomain
                  value: "{{inputs.parameters.base-subdomain}}"
        - - name: run-ping-check-parser
            template: ping-check-parser
        - - name: run-ping-check-uploader
            template: ping-check-uploader
            arguments:
              parameters:
                - name: base-subdomain
                  value: "{{inputs.parameters.base-subdomain}}"

    - name: ping-check-self
      inputs:
        parameters:
          - name: base-subdomain
      script:
        image: python:3.12.1-alpine3.19
        command: [python]
        source: |
          import json
          import subprocess
          import os

          def check_ping(subdomain):
              try:
                  subprocess.check_output(
                      ['ping', '-c', '1', '-W', '1', subdomain],
                      stderr=subprocess.STDOUT
                  )
                  return True
              except subprocess.CalledProcessError:
                  return False

          subdomains_json = '{{inputs.parameters.base-subdomain}}'
          subdomains_data = json.loads(subdomains_json)

          reachable = []
          unreachable = []

          for subdomain in subdomains_data.get('subdomains', []):
              if check_ping(subdomain):
                  reachable.append(subdomain)
              else:
                  unreachable.append(subdomain)

          output_dir = '/mnt/output'
          os.makedirs(output_dir, exist_ok=True)

          with open(os.path.join(output_dir, 'reachable.txt'), 'w') as file:
              for subdomain in reachable:
                  file.write(subdomain + '\n')

          with open(os.path.join(output_dir, 'unreachable.txt'), 'w') as file:
              for subdomain in unreachable:
                  file.write(subdomain + '\n')
        volumeMounts:
          - name: shared-output
            mountPath: /mnt/output

    - name: ping-check-parser
      script:
        image: python:3.12.1-alpine3.19
        volumeMounts:
          - name: shared-output
            mountPath: /mnt/output
        command: [python]
        source: |
          import json
          import os
          from datetime import datetime

          def read_domains(file_name):
              path = os.path.join('/mnt/output', file_name)
              if os.path.exists(path):
                  with open(path, 'r') as file:
                      return file.read().splitlines()
              return []

          reachable_domains = read_domains('reachable.txt')
          unreachable_domains = read_domains('unreachable.txt')

          output_json = {
              "output": {
                  "ping-check":{
                      "reachable_domains": reachable_domains,
                      "unreachable_domains": unreachable_domains
                  }
              }
          }

          with open('/mnt/output/ping-check-parsed.json', 'w') as json_file:
              json.dump(output_json, json_file, indent=4)

    - name: ping-check-uploader
      inputs:
        parameters:
          - name: base-subdomain
      script:
        image: astroicers/dark-nebula-uploader
        command: [python]
        source: |
          import redis
          import json
          from datetime import datetime

          r = redis.Redis(host='redis', port=6379, db=0)

          with open('/mnt/output/ping-check-parsed.json', 'r') as file:
              json_str = file.read()

          file_content = json.loads(json_str)
          key_name = "{{pod.name}}"

          file_content['timestamp'] = datetime.now().strftime("%Y%m%d%H%M%S")
          file_content['workflow'] = "{{workflow.name}}"
          file_content['pod'] = "{{pod.name}}"
          file_content['input'] = '{{inputs.parameters.base-subdomain}}'
          file_content['type'] = "subdomain-ping-check"
          json_str_updated = json.dumps(file_content)

          r.set(key_name, json_str_updated)
        volumeMounts:
          - name: shared-output
            mountPath: /mnt/output
