apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: crt-sh-template
spec:
  volumes:
    - name: shared-output
      persistentVolumeClaim:
        claimName: shared-pvc
  templates:
    - name: crt-sh
      inputs:
        parameters:
          - name: base-domain
      steps:
        - - name: run-crt-sh-self
            template: crt-sh-self
            arguments:
              parameters:
                - name: base-domain
                  value: "{{inputs.parameters.base-domain}}"
        - - name: run-crt-sh-parser
            template: crt-sh-parser
        - - name: run-crt-sh-uploader
            template: crt-sh-uploader
            arguments:
              parameters:
                - name: base-domain
                  value: "{{inputs.parameters.base-domain}}"

    - name: crt-sh-self
      inputs:
        parameters:
          - name: base-domain
      script:
        image: curlimages/curl:8.5.0
        volumeMounts:
          - name: shared-output
            mountPath: /mnt/output
        securityContext:
          runAsUser: 0
        command: [sh]
        source: |
          set -e
          DOMAIN="{{inputs.parameters.base-domain}}"
          curl https://crt.sh/?q=${DOMAIN} | grep "${DOMAIN}" | grep "<TD>" | sed -e 's/<TD>//' | sed -e 's/<\/TD>//' | sed '$!N; /^\(.*\)\n\1$/!P; D' | sed 's/^[ \t]*//g' | sed -e 's/<BR>/\n/g' > /tmp/crt_sh.txt
          mv /tmp/crt_sh.txt /mnt/output/crt-sh.txt

    - name: crt-sh-parser
      script:
        image: python:3.12.1-alpine3.19
        volumeMounts:
          - name: shared-output
            mountPath: /mnt/output
        command: [python]
        source: |
          import re
          import json

          def extract_domains(file_path):
              with open(file_path, 'r') as file:
                  content = file.read()
                  pattern = r'\b(?:[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?\.)+[a-z]{2,}\b'
                  return set(re.findall(pattern, content, re.IGNORECASE))

          def save_domains_as_json(domains, output_file_path):
              with open(output_file_path, 'w') as file:
                  json_data = {"domains": list(domains)}
                  json.dump(json_data, file, indent=4)

          def main():
              input_file_path = '/mnt/output/crt-sh.txt'
              output_file_path = '/mnt/output/crt-sh-parsed.json'
              domains = extract_domains(input_file_path)
              save_domains_as_json(domains, output_file_path)

          if __name__ == "__main__":
              main()


    # - name: crt-sh-uploader
    #   container:
    #     image: redis:7.2.4-alpine
    #     command: [sh, -c]
    #     args: ["redis-cli -h redis SET {{pod.name}}-$(date +%Y%m%d%H%M%S) \"$(cat /mnt/output/crt-sh-parsed.json)\""]
    #     volumeMounts:
    #       - name: shared-output
    #         mountPath: /mnt/output

    - name: crt-sh-uploader
      inputs:
        parameters:
          - name: base-domain
      script:
        image: astroicers/dark-nebula-uploader
        command: [python]
        source: |
          import redis
          import json
          from datetime import datetime

          r = redis.Redis(host='redis', port=6379, db=0)

          with open('/mnt/output/subfinder-parsed.json', 'r') as file:
              json_str = file.read()

          file_content = json.loads(json_str)
          key_name = "{{pod.name}}"
          
          file_content['timestamp'] = datetime.now().strftime("%Y%m%d%H%M%S")
          file_content['workflow'] = "{{workflow.name}}"
          file_content['pod'] = "{{pod.name}}"
          file_content['input'] = "{{inputs.parameters.base-domain}}"
          file_content['tool'] = "crt-sh"
          file_content['type'] = "subdomain-enumeration"
          file_content['output'] = file_content['domains']
          del file_content['domains']
          json_str_updated = json.dumps(file_content)

          r.set(key_name, json_str_updated)
        volumeMounts:
          - name: shared-output
            mountPath: /mnt/output